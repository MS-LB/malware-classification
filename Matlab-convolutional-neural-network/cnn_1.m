
% Small dataset
%{
testImds =  imageDatastore('/Users/mjscheid/Desktop/478_Project/datasets/grayscale-images/grayscale-tiny-4-cnn1/test/','IncludeSubFolders',true','LabelSource','foldernames');
valImds =   imageDatastore('/Users/mjscheid/Desktop/478_Project/datasets/grayscale-images/grayscale-tiny-4-cnn1/val/','IncludeSubFolders',true','LabelSource','foldernames');
trainImds = imageDatastore('/Users/mjscheid/Desktop/478_Project/datasets/grayscale-images/grayscale-tiny-4-cnn1/train/','IncludeSubFolders',true','LabelSource','foldernames');
%}                       

% 4 att. dataset
%{
testImds =  imageDatastore('/Users/mjscheid/Desktop/478_Project/datasets/grayscale-images/cnn1-4/test/','IncludeSubFolders',true','LabelSource','foldernames');
valImds =   imageDatastore('/Users/mjscheid/Desktop/478_Project/datasets/grayscale-images/cnn1-4/val/','IncludeSubFolders',true','LabelSource','foldernames');
trainImds = imageDatastore('/Users/mjscheid/Desktop/478_Project/datasets/grayscale-images/cnn1-4/train/','IncludeSubFolders',true','LabelSource','foldernames');
%}

% 8 att. dataset
%{
testImds = imageDatastore('/Users/mjscheid/Desktop/478_Project/datasets/grayscale-images/cnn1-8/test/','IncludeSubFolders',true','LabelSource','foldernames');
valImds = imageDatastore('/Users/mjscheid/Desktop/478_Project/datasets/grayscale-images/cnn1-8/val/','IncludeSubFolders',true','LabelSource','foldernames');
trainImds = imageDatastore('/Users/mjscheid/Desktop/478_Project/datasets/grayscale-images/cnn1-8/train/','IncludeSubFolders',true','LabelSource','foldernames');
%}

inputSize = [16 16 1];
numClasses = 2;

layers = [
    imageInputLayer(inputSize)
    convolution2dLayer(5,20)
    batchNormalizationLayer
    reluLayer
    fullyConnectedLayer(numClasses)
    softmaxLayer
    classificationLayer];


options = trainingOptions('sgdm', ...
    'MaxEpochs',30, ...
    'ValidationData',valImds, ...
    'ValidationFrequency',30, ...
    'Verbose',false, ...
    'Plots','training-progress');

net = trainNetwork(trainImds,layers,options);

YPred = classify(net,testImds);
YTest = testImds.Labels;


accuracy = mean(YPred == YTest);

disp("accuracy");



disp(accuracy);

% plotroc(YTest,YPred)
%{
cgt = double(YTest); 
clabel = double(YPred); 
[X,Y] = perfcurve(cgt,clabel,'malware');
plot(X,Y);
xlabel('False positive rate');
ylabel('True positive rate');
title('ROC for Classification by Logistic Regression');
%}

% predictedLabels = predict(net, testImds);
% confMat = confusionmat(testImds.Labels, predictedLabels);
% confMat = confMat./sum(confMat,2);
% accuracy = mean(diag(confMat));
% disp(confMat);




